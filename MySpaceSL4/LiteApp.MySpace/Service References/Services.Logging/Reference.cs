//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace LiteApp.MySpace.Services.Logging {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerFault", Namespace="http://schemas.datacontract.org/2004/07/LiteApp.MySpace.Web.FaultHandling")]
    public partial class ServerFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private LiteApp.MySpace.Services.Logging.ServerFaultCode FaultCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LiteApp.MySpace.Services.Logging.ServerFaultCode FaultCode {
            get {
                return this.FaultCodeField;
            }
            set {
                if ((this.FaultCodeField.Equals(value) != true)) {
                    this.FaultCodeField = value;
                    this.RaisePropertyChanged("FaultCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerFaultCode", Namespace="http://schemas.datacontract.org/2004/07/LiteApp.MySpace.Web.FaultHandling")]
    public enum ServerFaultCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Generic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotAuthroized = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Services.Logging.LoggingService")]
    public interface LoggingService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LoggingService/GetPagedLogs", ReplyAction="urn:LoggingService/GetPagedLogsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LiteApp.MySpace.Services.Logging.ServerFault), Action="urn:LoggingService/GetPagedLogsServerFaultFault", Name="ServerFault", Namespace="http://schemas.datacontract.org/2004/07/LiteApp.MySpace.Web.FaultHandling")]
        System.IAsyncResult BeginGetPagedLogs(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState);
        
        LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> EndGetPagedLogs(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LoggingServiceChannel : LiteApp.MySpace.Services.Logging.LoggingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPagedLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPagedLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggingServiceClient : System.ServiceModel.ClientBase<LiteApp.MySpace.Services.Logging.LoggingService>, LiteApp.MySpace.Services.Logging.LoggingService {
        
        private BeginOperationDelegate onBeginGetPagedLogsDelegate;
        
        private EndOperationDelegate onEndGetPagedLogsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPagedLogsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LoggingServiceClient() {
        }
        
        public LoggingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetPagedLogsCompletedEventArgs> GetPagedLogsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiteApp.MySpace.Services.Logging.LoggingService.BeginGetPagedLogs(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPagedLogs(pageIndex, pageSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> LiteApp.MySpace.Services.Logging.LoggingService.EndGetPagedLogs(System.IAsyncResult result) {
            return base.Channel.EndGetPagedLogs(result);
        }
        
        private System.IAsyncResult OnBeginGetPagedLogs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            return ((LiteApp.MySpace.Services.Logging.LoggingService)(this)).BeginGetPagedLogs(pageIndex, pageSize, callback, asyncState);
        }
        
        private object[] OnEndGetPagedLogs(System.IAsyncResult result) {
            LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> retVal = ((LiteApp.MySpace.Services.Logging.LoggingService)(this)).EndGetPagedLogs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPagedLogsCompleted(object state) {
            if ((this.GetPagedLogsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPagedLogsCompleted(this, new GetPagedLogsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPagedLogsAsync(int pageIndex, int pageSize) {
            this.GetPagedLogsAsync(pageIndex, pageSize, null);
        }
        
        public void GetPagedLogsAsync(int pageIndex, int pageSize, object userState) {
            if ((this.onBeginGetPagedLogsDelegate == null)) {
                this.onBeginGetPagedLogsDelegate = new BeginOperationDelegate(this.OnBeginGetPagedLogs);
            }
            if ((this.onEndGetPagedLogsDelegate == null)) {
                this.onEndGetPagedLogsDelegate = new EndOperationDelegate(this.OnEndGetPagedLogs);
            }
            if ((this.onGetPagedLogsCompletedDelegate == null)) {
                this.onGetPagedLogsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPagedLogsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPagedLogsDelegate, new object[] {
                        pageIndex,
                        pageSize}, this.onEndGetPagedLogsDelegate, this.onGetPagedLogsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LiteApp.MySpace.Services.Logging.LoggingService CreateChannel() {
            return new LoggingServiceClientChannel(this);
        }
        
        private class LoggingServiceClientChannel : ChannelBase<LiteApp.MySpace.Services.Logging.LoggingService>, LiteApp.MySpace.Services.Logging.LoggingService {
            
            public LoggingServiceClientChannel(System.ServiceModel.ClientBase<LiteApp.MySpace.Services.Logging.LoggingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetPagedLogs(int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pageIndex;
                _args[1] = pageSize;
                System.IAsyncResult _result = base.BeginInvoke("GetPagedLogs", _args, callback, asyncState);
                return _result;
            }
            
            public LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> EndGetPagedLogs(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry> _result = ((LiteApp.MySpace.Entities.PagedResult<LiteApp.MySpace.Entities.LogEntry>)(base.EndInvoke("GetPagedLogs", _args, result)));
                return _result;
            }
        }
    }
}
