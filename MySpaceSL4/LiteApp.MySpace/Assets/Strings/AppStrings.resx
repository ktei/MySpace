<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALot" xml:space="preserve">
    <value>A few words about what I planned to create. First of all, it should be a simple, customizable control. The only limitation - I didn't want to hard code its geometry, a shape of animated element. This element is defined in the Generic.xaml file, but can be redefined as a part of a user's Style.

If you look at the Generic.xaml, you will see only one animation element AnimationElementTemplate defined as a DataTemplate. The problem was to manifold it. I was surprised to know that deep object cloning is a challenging task in Silverlight. If it takes three lines of code in WPF (here is a link to an example), there is no simple solution for Silverlight.

At first I borrowed a code, cloning objects, from a nice article Professional Drag and Drop Manager Control for Silverlight 2 by Thilo Ruppert. But later, I have followed Nicolas Dorier's advice to use DataTemplate as an animation element and just load it as many times as I need. Thank you Nicolas for your comments.

So, now we have an animation element and we know how to make its copies. Let's see how it works.</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>Space of Rui</value>
  </data>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CloseButtonText" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CreateAlbumWindowTitle" xml:space="preserve">
    <value>Create Album</value>
  </data>
  <data name="CreateButtonText" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="DeletingCommentMessage" xml:space="preserve">
    <value>This comment is being deleted...</value>
  </data>
  <data name="HomePageTitle" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Intro" xml:space="preserve">
    <value />
  </data>
  <data name="NoButtonText" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoCommentFoundMessage" xml:space="preserve">
    <value>No comment is found</value>
  </data>
  <data name="NoPhotoFoundMessage" xml:space="preserve">
    <value>No photo is found</value>
  </data>
  <data name="NotRegisteredYetMessage" xml:space="preserve">
    <value>Not registered yet?</value>
  </data>
  <data name="OKButtonText" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="OperationFailedMessageHeader" xml:space="preserve">
    <value>Operation failed</value>
  </data>
  <data name="OperationNeedsSignInMessage" xml:space="preserve">
    <value>This operation needs you to sign in first.</value>
  </data>
  <data name="PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PhotosPageTitle" xml:space="preserve">
    <value>Photos</value>
  </data>
  <data name="PostButtonText" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="ProcessingMessage" xml:space="preserve">
    <value>Processing... Please wait</value>
  </data>
  <data name="SignInButtonText" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="SignInFailedMessageHeader" xml:space="preserve">
    <value>Sign-in failed</value>
  </data>
  <data name="SigningInMessage" xml:space="preserve">
    <value>Signing you int...</value>
  </data>
  <data name="SignInRequiredMessageHeader" xml:space="preserve">
    <value>Sign-in is required</value>
  </data>
  <data name="SignInWindowTitle" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="SignOutButtonText" xml:space="preserve">
    <value>Sign Out</value>
  </data>
  <data name="SignUpNowButtonText" xml:space="preserve">
    <value>Sign up now</value>
  </data>
  <data name="SignUpWindowTitle" xml:space="preserve">
    <value>Sign Up</value>
  </data>
  <data name="UploadPhotoWindowTitle" xml:space="preserve">
    <value>Upload Photo</value>
  </data>
  <data name="UserNameLabel" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="YesButtonText" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="TakeMeBackToMessage" xml:space="preserve">
    <value>Take me back to</value>
  </data>
  <data name="ConfirmPasswordLabel" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="EmailLabel" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="CreateAlbumButtonText" xml:space="preserve">
    <value>Create Album</value>
  </data>
  <data name="NoAlbumFoundMessage" xml:space="preserve">
    <value>No album is found</value>
  </data>
  <data name="DeleteButtonText" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="UploadButtonText" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="ViewButtonText" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="SignInLinkText" xml:space="preserve">
    <value>sign in</value>
  </data>
  <data name="ToPostCommentPlease" xml:space="preserve">
    <value>To post any comment, please</value>
  </data>
</root>